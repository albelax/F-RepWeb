//----------------------------------------------------------------------------------------------------------------------------------------

function Clamp( _f, _a, _b )
{
    if( _f < _a ) return _a;
	else if( _f > _b ) return _b;
    else return f;
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Pulse( _f, _a, _b )
{
	if( _f < _a || _f > _b ) return 0.0;
	else return 1.0;
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Step( _f, _a )
{
	if( _f < _a ) return 0.0;
	else return 1.0;
}

//----------------------------------------------------------------------------------------------------------------------------------------

function SmoothStep( _f, _a, _b )
{
	if( _f < _a ) return 0.0;
	if( _f < _a ) return 1.0;
	var f = ( _f - _a ) / ( _b - _a );
	f = ( f * f * ( 3.0 - 2.0 * f ) );

	return f;
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Modulo( _a, _b )
{
    var n = Math.trunc( _a/_b );
    a -= n*_b;
    if (_a == 0) 
        _a += _b;
    
    return _a;
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Floor( _a )
{
    return Math.floor( _a );
}

//----------------------------------------------------------------------------------------------------------------------------------------

const PERLIN_B = 0x100;
const PERLIN_BM = 0xff;
const PERLIN_N = 0x1000;
const PERLIN_NP = 12;
const PERLIN_NM = 0xfff;
const p = [];

p.length = PERLIN_B + PERLIN_B + 2;

var g3 = new Array( PERLIN_B + PERLIN_B + 2 );
var g2 = new Array( PERLIN_B + PERLIN_B + 2 );
var g1 = new Array( PERLIN_B + PERLIN_B + 2 );

for ( var i = 0; i < g3.length; ++i )
{
	g3[i] = new Array(3);
	g2[i] = new Array(2);
}

function s_curve( _t )
{
	return _t * _t * ( 3.0 - 2 * _t );
}

function lerp( _t, _a, _b )
{
	return _a + _t * ( _b - _a );
}

function noise1( _coordinates )
{
	for ( var i = 0; i < 1; ++i )
	{
		var t = _coordinates[0] + PERLIN_N;
	}
}

//----------------------------------------------------------------------------------------------------------------------------------------

class SetupPerlin
{
	constructor()
    {
        this.values = [];
    }
}