//----------------------------------------------------------------------------------------------------------------------------------------

function Sphere(_x, _y, _z, c_x = 0, c_y = 0, c_z = 0, _radius = 1 )
{
	// x,y,z = point in the grid, c_x, c_y, c_z = center
	var x = _x - c_x;
	var y = _y - c_y;
	var z = _z - c_z;

	return eval( "-(x * x) - (y * y) - (z * z) +" + _radius );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Cube( _x, _y, _z, c_x = 0, c_y = 0, c_z = 0, _size = 1 )
{
	var x = _x - c_x;
	var y = _y - c_y;
	var z = _z - c_z;
	return eval( "Math.min( -x * x, -y * y, -z * z ) + " + _size );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function TangleCube( _x, _y, _z, c_x = 0, c_y = 0, c_z = 0, _size = 1, _value = 11.8 )
{
    var x = ( _x - c_x ) / _size;
	var y = ( _y - c_y ) / _size;
	var z = ( _z - c_z ) / _size;
	return eval( "-(x**4 - 5*x**2 + y**4 - 5*y**2 + z**4 - 5*z**2 +"+ _value +")" );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Torus( _x, _y, _z, c_x = 0, c_y = 0, c_z = 0, _horizontalRadius = 1, _verticalRadius = 0.5 )
{
	this.HR = _horizontalRadius;
	this.VR = _verticalRadius;
	
    var x = _x - c_x;
	var y = _y - c_y;
	var z = _z - c_z;

	return eval( "-(Math.sqrt((Math.sqrt(x*x + z*z)-" + this.HR + ") * ( Math.sqrt(x*x + z*z)- " + this.HR + ") + y * y ) -" + this.VR+")" );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function X( _x, _value = 0 )
{
    var x = _x;
	return eval( "-x + " + _value );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Y2( _y, _value = 0 )
{
    var y = _y;
	return eval( "-(y * y - " + _value+")" );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Y( _y, _value = 0 )
{
    var y = _y;
	return eval( "-y + "+ _value );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Z( _z, _value = 0 )
{
    var z = _z;
	return eval( "-z + " + _value );
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Cylinder( _x, _y, _z, c_x = 0, c_y = 0, c_z = 0, _width = 1, _height = 1 )
{
	// infinite Cylinder - 2 Planes
    var x = _x - c_x;
	var y = _y - c_y;
	var z = _z - c_z;

	var expression = "Math.min( -x*x - z*z + " + _width + ", -( y * y -" + _height + "))";
	return eval(expression);
}

//----------------------------------------------------------------------------------------------------------------------------------------

function SuperEllipsoid( _x, _y, _z, _a = 1, _b = 1, _c = 1, c_x = 0, c_y = 0, c_z = 0, _s1 = 0.2, _s2 = 0.2 )
{
    var x = _x - c_x;
	var y = _y - c_y;
	var z = _z - c_z;
	
	// var g = "1-(((x)/_a)**2/_s2+((y)/_b)**2/_s2)**_s2/_s1 - ((z)/_c)**2/_s1";
	var f = "1-( ((x/_a)**(2/_s2) + (y/_b)**(2/_s2) )**(_s2/_s1)) - ((z/_c)**(2/_s1))";
	return eval( f );
}

// var p = 2./_s2;
// var x = (_x - c_x)**p;
// var y = (_y - c_y)**p;
// var z = (_z - c_z)**2.0/_s1;

// var value = (x+y)**_s1/_s2;
// return 1.0 - value - z; 

//----------------------------------------------------------------------------------------------------------------------------------------

function Cone(_x, _y, _z, _r = 0.5, _h = 1)
{
	var x = _x;
	var y = _y - _h;
	var z = _z;
	return eval("Math.min(y**2 - (x/_r)**2 - (z/_r)**2, -( _y * _y - _h ))");
}

//----------------------------------------------------------------------------------------------------------------------------------------

function Blobby( _x, _y, _z, _x0, _y0, _z0, _a, _b, _threshold )
{
	var blobby = 0;
	var x,y,z;
	for( var i = 0; i < _a.lenght; ++i )
	{
		x = _x - _x0[i];
		y = _y - _y0[i];
		z = _z - _z0[i];
		blobby += _b[i] * Math.exp( -_a[i] * ( x*x + y*y + z*z ) );
	}
	return blobby - _threshold;
}

//----------------------------------------------------------------------------------------------------------------------------------------

// blobby = 0.;
//       for(i=0; i<num; i++)
//         {
//          xt = x[0] - x0[i];
//          yt = x[1] - y0[i];
//          zt = x[2] - z0[i];
//          blobby = blobby + b[i]*exp(-a[i]*(xt*xt+yt*yt+zt*zt));
//         }
//       return (blobby - T);